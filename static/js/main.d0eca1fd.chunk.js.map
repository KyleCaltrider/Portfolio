{"version":3,"sources":["WebWorker.js","CellWorker.js","App.js","serviceWorker.js","index.js"],"names":["WebWorker","worker","Object","classCallCheck","this","code","toString","blob","Blob","Worker","URL","createObjectURL","CellWorker","self","addEventListener","culture","circ","Math","PI","_culture$data","data","cells","food","uv","canvasWidth","canvasHeight","foodCycle","foodAmount","cellsLimit","updates","offspring","newCells","map","cell","ic","cyclesAlive","repCycle","moveCell","width","height","random","heading","magnitude","floor","k","speed","scale","Fx","cos","Fy","sin","x","position","y","energy","findNucleus","rgb","color","c","nucleusColor","forEach","mate","im","x1","x2","y1","y2","length","id","sqrt","pow","abs","newCell","toConsumableArray","Array","_","join","push","filter","concat","postMessage","works","name","description","react_default","a","createElement","href","live","image","src","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","canvas","ctx","cellCount","simSpeed","hovers","bannerArrow","updateSimulation","bind","assertThisInitialized","updateCanvas","handleCanvasClick","toggleHover","initCanvas","clearInterval","timer","terminate","_this2","refs","getContext","setState","setInterval","seedCells","_this$state","clearRect","lamp","createRadialGradient","max","addColorStop","fillStyle","fillRect","startX","startY","gapWidth","min","strokeStyle","beginPath","moveTo","lineTo","stroke","o","i","da","db","arc","fill","closePath","nucleus","quantity","e","ne","nativeEvent","pos","offsetX","offsetY","key","console","log","_this3","className","onMouseEnter","onMouseLeave","onClick","scroll","scrollTo","work","ref","window","innerWidth","innerHeight","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0eca1fd.chunk.js","sourcesContent":["class WebWorker {\n    constructor(worker) {\n        const code = worker.toString(),\n              blob = new Blob([\"(\" + code + \")()\"]);\n        return new Worker(URL.createObjectURL(blob));\n    }\n}\n\nexport default WebWorker;","export default () => {\n    self.addEventListener('message', culture => {   // eslint-disable-line no-restricted-globals\n        if (!culture) return;\n\n        const circ = 2 * Math.PI;\n\n        function distance(x1, x2, y1, y2) {\n            return Math.sqrt(Math.pow(Math.abs(x1 - x2), 2) + Math.pow(Math.abs(y1 - y2), 2))\n        }\n\n        function findNucleus(cell) {\n            const magnitude = -1 * cell.scale / 3,\n                  Fx = magnitude * Math.cos(cell.heading),\n                  Fy = magnitude * Math.sin(cell.heading),\n                  x = Math.floor(cell.position[0] + Fx),\n                  y = Math.floor(cell.position[1] - Fy);\n            return [x, y];\n        }\n\n        function moveCell(cell, width, height) {\n            if (Math.random() < (0.5)) cell.heading += (Math.random() * (0.8) - (0.4));\n            if (cell.heading >= circ) cell.heading -= circ;\n            if (cell.heading < 0) cell.heading = circ + cell.heading;\n            let magnitude = Math.floor(Math.random() * 8),\n            k         = 2 * cell.speed / cell.scale,\n            Fx        = magnitude * Math.cos(cell.heading),\n            Fy        = magnitude * Math.sin(cell.heading),\n            x         = Math.floor(cell.position[0] + (Fx * k)),\n            y         = Math.floor(cell.position[1] - (Fy * k));\n            if ( x>20 && y>20 && x<(width-20) && y<(height-20) ) {\n                cell[\"position\"][0] = x;\n                cell[\"position\"][1] = y;\n                cell.energy -= (magnitude / 10);\n                cell.scale -= (magnitude / 100);\n                if (cell.scale < 1) cell.scale = 1;\n            }\n            else {\n                cell.heading += Math.PI;\n                if (cell.heading > circ) cell.heading -= circ;\n                moveCell(cell, width, height);\n            }\n\n            return cell;\n        }\n\n\n\n\n\n\n        let { cells, food, uv, canvasWidth, canvasHeight, foodCycle, foodAmount, cellsLimit } = culture.data;\n        let updates = {},\n            offspring = [];\n        if (foodCycle === 0) {\n            food = foodAmount;\n            foodCycle = 20;\n        }\n\n        let newCells = cells.map( (cell, ic) => {\n            // Move Cell\n            cell.cyclesAlive++;\n            cell.repCycle++;\n            cell = moveCell(cell, canvasWidth, canvasHeight);\n\n            // Calculate nucleus position\n            cell['nucleus'] = findNucleus(cell);\n            // Let Cell Eat\n            if (Math.random() < food / 100) {\n                cell.energy += 1;\n                cell.scale += 0.1;\n                if (cell.scale > 10) cell.scale = 10;\n                if (cell.energy > 100) cell.energy = 100;\n                food -= 0.1;\n            }\n\n            // Subject Cell To Mutations\n            if (Math.random() < uv / 20000) {\n                const rgb = Math.floor(Math.random() * 3);\n                cell['color'][rgb] = Math.floor(Math.random() * 256);\n                cell.color = cell.color.map(c => {\n                    if (c > 255) c = 255;\n                    return c;\n                });\n            }\n            if (Math.random() < uv / 20000) {\n                const rgb = Math.floor(Math.random() * 3);\n                cell['nucleusColor'][rgb] = Math.floor(Math.random() * 256);\n                cell.nucleusColor = cell.nucleusColor.map(c => {\n                    if (c > 255) c = 255;\n                    return c;\n                });\n            }\n\n            // Let Cells Reproduce\n            cells.forEach((mate , im) => {\n                if (cells.length < cellsLimit &&\n                    cell.id !== mate.id &&\n                    im > ic &&\n                    cell.repCycle > 100 &&\n                    mate.repCycle > 100 &&\n                    cell.energy > 50 &&\n                    mate.energy > 50 &&\n                    Math.random() > 0.5) {\n                    const d = distance(cell.position[0], mate.position[0], cell.position[1], mate.position[1]);\n                    if (d < (2*(cell.scale + mate.scale) + 5)) {\n                        const newCell = {\n                            id: [...Array(10)].map(_ => Math.floor(Math.random()*10)).join(\"\") + cells.length,\n                            energy: 50,\n                            speed: Math.random() > 0.5 ? cell.speed : mate.speed,\n                            scale: 5,\n                            color: Math.random() > 0.5 ? cell.color : mate.color,\n                            nucleusColor: Math.random() > 0.5 ? cell.nucleusColor : mate.nucleusColor,\n                            cyclesAlive: 0,\n                            repCycle: 0,\n                            position: [Math.abs((cell.position[0] + mate.position[0]) / 2),\n                                       Math.abs((cell.position[1] + mate.position[1]) / 2)],\n                            heading: Math.random() * circ\n                        }\n                        cell.energy -= 30;\n                        mate.energy -= 30;\n                        cell.repCycle = 0;\n                        mate.repCycle = 0;\n                        newCell['nucleus'] = findNucleus(newCell);\n                        offspring.push(newCell);\n                    }\n                }\n            })\n            \n            return cell;\n        })\n        newCells = newCells.filter(cell => cell.energy > 0 && cell.cyclesAlive < 800);\n        newCells = newCells.concat(offspring);\n        updates[\"cells\"] = newCells;\n        updates[\"food\"] = food;\n        updates[\"foodCycle\"] = foodCycle - 1;\n        return postMessage(updates);\n    });\n};","import React from 'react';\nimport { animateScroll as scroll } from 'react-scroll';\nimport './App.css';\n\nimport WebWorker from './WebWorker';\nimport CellWorker from './CellWorker';\n\n\nconst works = [\n  {\n    name: \"Facial Recognition Demo\",\n    description: \"Python, React, & MongoDB powered facial recognition app. Train a user-unique system to recognize faces within a photo.\",\n    code: <a href=\"\">Code</a>,\n    live: <a href=\"\">Live</a>,\n    image: <img src=\"\" />\n  },\n  {\n    name: \"Parent2PI\",\n    description: \"React, Node, Paypal, & MongoDB powered booking/customer outreach app for Parenting To Promote Independence &trade;\",\n    code: <a href=\"\">Code</a>,\n    live: <a href=\"\">Live</a>,\n    image: <img src=\"\" />\n  },\n  {\n    name: \"React Etsy Store\",\n    description: \"React, Node, Etsy, & MongoDB powered custom Etsy storefront.\",\n    code: <a href=\"\">Code</a>,\n    live: <a href=\"\">Live</a>,\n    image: <img src=\"\" />\n  }\n];\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvas: null,\n      ctx: null,\n      cells: [],\n      food: null,\n      foodAmount: 100,\n      foodCycle: 30,\n      uv: 10,\n      cellCount: null,\n      simSpeed: 50,\n      cellsLimit: null,\n      hovers: {bannerArrow: false}\n    }\n    this.worker = new WebWorker(CellWorker);\n\n    this.updateSimulation = this.updateSimulation.bind(this);\n    this.updateCanvas = this.updateCanvas.bind(this);\n    this.handleCanvasClick = this.handleCanvasClick.bind(this);\n    this.toggleHover = this.toggleHover.bind(this);\n  }\n\n  componentDidMount() {\n    this.initCanvas();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.timer);\n    this.worker.terminate();\n  }\n\n  initCanvas() {\n    const canvas = this.refs['canvas'],\n          ctx    = canvas.getContext('2d');\n    \n    this.setState({\n      ctx: ctx,\n      canvas: canvas,\n      timer: setInterval(this.updateSimulation, this.state.simSpeed),\n      cells: this.seedCells(this.state.cellCount, canvas.width, canvas.height),\n      canvasWidth: canvas.width,\n      canvasHeight: canvas.height,\n      food: this.state.foodAmount,\n      cellCount: Math.floor((canvas.width * canvas.height) / 80000),\n      cellsLimit: Math.floor((canvas.width * canvas.height) / 5000)\n    });\n\n    // Worker Listener\n    this.worker.addEventListener('message', updates => {\n      if (!updates) return;\n      updates = updates.data;\n      this.setState(updates);\n      this.updateCanvas(updates);\n      if (updates.cells.length === 0) this.setState({cells: this.seedCells(this.state.cellCount, canvas.width, canvas.height)});\n    })\n  }\n\n  updateSimulation() {\n    const culture = {\n      food: this.state.food,\n      cells: this.state.cells,\n      uv: this.state.uv,\n      canvasWidth: this.state.canvasWidth,\n      canvasHeight: this.state.canvasHeight,\n      foodCycle: this.state.foodCycle,\n      foodAmount: this.state.foodAmount,\n      cellsLimit: this.state.cellsLimit\n    }\n\n    this.worker.postMessage(culture);\n  }\n\n  updateCanvas(updates) {\n    const { ctx, canvas } = this.state;\n    // Clear Canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n        \n    // Draw Background\n\n    // Lamp\n    const lamp = ctx.createRadialGradient(canvas.width/2, canvas.height/2, 0, canvas.width/2, canvas.height/2, Math.max(canvas.width, canvas.height) * 0.5);\n    lamp.addColorStop(0, \"rgba(255, 255, 0, 0.05)\");\n    lamp.addColorStop(1, \"rgba(0, 0, 0, 0.05)\");\n    ctx.fillStyle = lamp;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Hemocytometer grid\n    const startX = (canvas.width / 2),\n          startY = (canvas.height / 2),\n          gapWidth = Math.min(startX, startY) / 6; \n    ctx.strokeStyle = \"rgba(0, 0, 0, 0.3)\"\n    ctx.beginPath();\n    ctx.moveTo(canvas.width / 2, 0);\n    ctx.lineTo(canvas.width / 2, canvas.height);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(0, canvas.height / 2);\n    ctx.lineTo(canvas.width, canvas.height / 2);\n    ctx.stroke();\n    for (let o = 0; o < 2; o++) {\n      for (let i = 1; i <= 4; i++) {\n        ctx.strokeStyle = i === 4 ? \"rgba(0, 0, 0, 0.3)\" : \"rgba(0, 0, 0, 0.1)\";  \n        if (o === 0) {\n          const da = startX + gapWidth * i,\n                db = startX - gapWidth * i;\n          ctx.beginPath();\n          ctx.moveTo(da, 0);\n          ctx.lineTo(da, canvas.height);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(db, 0);\n          ctx.lineTo(db, canvas.height);\n          ctx.stroke();\n        }\n        else {\n          const da = startY + gapWidth * i,\n                db = startY - gapWidth * i;\n          ctx.beginPath();\n          ctx.moveTo(0, da);\n          ctx.lineTo(canvas.width, da);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(0, db);\n          ctx.lineTo(canvas.width, db);\n          ctx.stroke();\n        }\n      }\n    }\n\n    // Draw Cells\n    updates.cells.forEach(cell => {\n      ctx.strokeStyle = \"rgba(0, 0, 0, 0.5)\"\n\n      // Cell\n      ctx.beginPath();\n      ctx.arc(cell.position[0], cell.position[1], cell.scale * 2, 0, 2 * Math.PI);\n      ctx.fillStyle = `rgba(${cell.color[0]}, ${cell.color[1]}, ${cell.color[2]}, 0.8)`;\n      ctx.stroke();\n      ctx.fill();\n      ctx.closePath();\n      // Nucleus\n      ctx.beginPath();\n      ctx.arc(cell.nucleus[0], cell.nucleus[1], cell.scale / 2, 0, 2 * Math.PI);\n      ctx.fillStyle = `rgba(${cell.nucleusColor[0]}, ${cell.nucleusColor[1]}, ${cell.nucleusColor[2]}, 0.7)`;\n      ctx.fill();\n      ctx.stroke();\n      ctx.closePath();\n    })\n  }\n\n  seedCells(quantity, width, height) {\n    const randomCoordinates = () => {\n      let x = Math.floor(Math.random() * ((width - 20) - 20) + 20),\n          y = Math.floor(Math.random() * ((height - 20) - 20) + 20);\n      return [x, y];\n    }\n    let cells = [];\n    for (let i = 0; i < quantity; i++) {\n      const cell = {\n        energy: 50,\n        speed: Math.floor(Math.random() * (7 - 3) + 3),\n        scale: 5,\n        color: [...Array(3)].map(_ => Math.floor(Math.random() * 266)),   // [255, 70, 144],\n        nucleusColor: [...Array(3)].map(_ => Math.floor(Math.random() * 266)),\n        cyclesAlive: 0,\n        repCycle: 0,\n        position: randomCoordinates(),\n        heading: Math.random() * 2 * Math.PI,\n        id: [...Array(10)].map(_ => Math.floor(Math.random()*10)).join(\"\") + i\n      };\n      cells.push(cell);\n    }\n    return cells;\n  }\n\n  handleCanvasClick(e) {\n   const ne        = e.nativeEvent,\n         pos       = [ne.offsetX, ne.offsetY],\n         { cells } = this.state;\n   this.setState({\n     cells: cells.filter(c => distance(c.position[0], pos[0], c.position[1], pos[1]) > c.scale * 3)\n   });\n\n  }\n\n  toggleHover(key) {\n    const { hovers } = this.state;\n    hovers[key] = !hovers[key];\n    console.log(hovers);\n    this.setState(hovers);\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n\n        <div id=\"banner-container\" >\n          <div id=\"banner\" >Hello, I'm Kyle</div>\n          <div className=\"arrow-down\" onMouseEnter={() => this.toggleHover(\"bannerArrow\")}\n              onMouseLeave={() => this.toggleHover(\"bannerArrow\")}\n              onClick={() => scroll.scrollTo(1000)} >\n            <div className={\"arrowL \" + (this.state.hovers.bannerArrow ? \"hover\" : \"\")} />\n            <div className={\"arrowR \" + (this.state.hovers.bannerArrow ? \"hover\" : \"\")} />\n          </div>\n        </div>\n\n        <div id=\"about-me\">\n          A full-stack web developer and scientist.\n          I am passionate about designing web applications.\n          Biology is another passion of mine, as such I hope you enjoy the Cell Simulation.\n          Below you can find some of my strengths and other works.\n        </div>\n\n        <div id=\"strengths\">\n            Icons!!!\n        </div>\n\n        <div id=\"works\">\n            {works.map(work => {\n              return(\n              <div className=\"work\">\n                <h2>{work.name}</h2>\n                {work.image}\n                <p>{work.description}</p>\n                {work.live}\n                {work.code}\n              </div>\n              )\n            })}\n        </div>\n\n        <div id=\"resume\">\n        </div>\n\n        <div id=\"simulation-container\" >\n          <canvas ref=\"canvas\"\n                  width={window.innerWidth}\n                  height={window.innerHeight}\n                  onClick={this.handleCanvasClick} />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nfunction distance(x1, x2, y1, y2) {\n  return Math.sqrt(Math.pow(Math.abs(x1 - x2), 2) + Math.pow(Math.abs(y1 - y2), 2))\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}